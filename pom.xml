<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>SqlPlus</groupId>
  <artifactId>SqlPlus</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <build>
    <sourceDirectory>src</sourceDirectory>
    <resources>
      <resource>
        <directory>src</directory>
        <excludes>
          <exclude>**/*.java</exclude>
        </excludes>
      </resource>
    </resources>
    <plugins>
<!--       <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.6.1</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin> -->
      
<!--      <plugin>
		<groupId>org.apache.maven.plugins</groupId>
	    <artifactId>maven-jar-plugin</artifactId>
     	<configuration>
	         <archive>
	             <manifest>
	                 <mainClass>com.mysql.MySQL</mainClass>
	                 <addClasspath>true</addClasspath>
	                 <classpathPrefix>lib/</classpathPrefix>
	             </manifest>
	         </archive>
	         <classesDirectory>
	         </classesDirectory>
	     </configuration>
	 </plugin> -->


<!-- <plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-dependency-plugin</artifactId>
<executions>
<execution>
<id>copy-dependencies</id>
<phase>compile</phase>
<goals>
<goal>copy-dependencies</goal>
</goals>
<configuration>
<excludeScope>provided</excludeScope>
<outputDirectory>${project.build.outputDirectory}/lib</outputDirectory>
<overWriteReleases>false</overWriteReleases>
<overWriteSnapshots>false</overWriteSnapshots>
<overWriteIfNewer>true</overWriteIfNewer>
</configuration>
</execution>
</executions>
</plugin> -->

		<plugin>
			<artifactId> maven-assembly-plugin </artifactId>
			<configuration>
				<descriptorRefs>
					<descriptorRef>jar-with-dependencies</descriptorRef>
				</descriptorRefs>
				<archive>
					<manifest>
						<mainClass>a</mainClass>
					</manifest>
				</archive>
			</configuration>
			<executions>
				<execution>
					<id>make-assembly</id>
					<phase>package</phase>
					<goals>
					<goal>single</goal>
					</goals>
				</execution>
			</executions>
		</plugin>
		
		<plugin>
				<groupId>com.github.wvengen</groupId>
				<artifactId>proguard-maven-plugin</artifactId>
				<version>2.0.14</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>proguard</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<attach>true</attach>
					<attachArtifactClassifier>pg</attachArtifactClassifier>
					<!-- attach 的作用是在 install 与 deploy 时将生成的 pg 文件也安装与部署 -->
					<options> <!-- 详细配置方式参考 ProGuard 官方文档 -->
						<!--<option>-dontobfuscate</option>-->
						<option>-ignorewarnings</option> <!--忽略所有告警-->
						<option>-dontshrink</option>   <!--不做 shrink -->
						<option>-dontoptimize</option> <!--不做 optimize -->
						<option>-dontskipnonpubliclibraryclasses</option>
						<option>-dontskipnonpubliclibraryclassmembers</option>
						<!-- <option>-repackageclasses org.noahx.proguard.example.project2.pg</option> -->
						<!--平行包结构（重构包层次），所有混淆的类放在 pg 包下-->
						<!-- 以下为 Keep，哪些内容保持不变，因为有一些内容混淆后（a,b,c）导致反射或按类名字符串相关的操作失效 -->
						<option>-keep class **.package-info</option>
						<!--保持包注解类-->
						<option>-keepattributes Signature</option>
						<!--JAXB NEED，具体原因不明，不加会导致 JAXB 出异常，如果不使用 JAXB 根据需要修改-->
						<!-- Jaxb requires generics to be available to perform xml parsing and without this option ProGuard was not retaining that information after obfuscation. That was causing the exception above. -->
						<option>-keepattributes SourceFile,LineNumberTable,*Annotation*</option>
						<!--保持源码名与行号（异常时有明确的栈信息），注解（默认会过滤掉所有注解，会影响框架的注解）-->
						<option>-keepclassmembers enum org.noahx.proguard.example.project2.** { *;}</option>
						<!--保持枚举中的名子，确保枚举 valueOf 可以使用-->
						<option>-keep class org.noahx.proguard.example.project2.bean.** { *;}</option>
						<!--保持 Bean 类，（由于很多框架会对 Bean 中的内容做反射处理，请根据自己的业务调整） -->
						<option>-keep class org.noahx.proguard.example.project2.Project2 { public void init(); public void
							destroy(); }
						</option>
						<option>-keep class MySql { *; }
						</option>
						<!-- 保持main方法 -->
						<option>-keepclassmembers class SqlPlus { public static void main(java.lang.String[]); }
						</option>
						<!-- 保持对外的接口性质类对外的类名与方法名不变 -->
					</options>
					 <!--指定混淆的jar包，我这里是将上一步输出的jar包进行混淆-->
             		<injar>SqlPlus-0.0.1-SNAPSHOT-jar-with-dependencies.jar</injar>
             		<!--指定输出的jar包名-->
					<outjar>${project.build.finalName}-pg</outjar>
					<obfuscate>true</obfuscate>
					<!-- 添加依赖，必须添加，不然会报一些莫名错误-->
					<libs>
						<lib>${java.home}/lib/rt.jar</lib>
						<lib>${java.home}/lib/jce.jar</lib>
					</libs>
				</configuration>
			</plugin>
		
    </plugins>
  </build>
  <dependencies>
  	<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
	<dependency>
		<groupId>mysql</groupId>
		<artifactId>mysql-connector-java</artifactId>
		<version>5.1.44</version>
	</dependency>
  </dependencies>
  
</project>